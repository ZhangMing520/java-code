######## 具体服务定义相关配置；公共属性的定义

# 每个IceBox实例都可以指定一个可读的名字
IceBox.InstanceName = MyAppIceBox1

# 所有服务初始化完成之后，服务管理器将打印  “MyAppIceBox1 ready”
# 如果有脚本想要等待所有服务准备就绪，这个特性很有用
IceBox.PrintServicesReady = MyAppIceBox1

# 存在多个Ice服务时候，通常它们之间有先后启动的顺序问题，通过下面的参数配置这些服务的启动先后顺序
IceBox.LoadOrder=serv1,serv2,serv3

# 优化本地服务之间调用的重要采纳数 UseSharedCommunicator,值为1表示开启优化
# 假设 Hello 和 Printer 的两个服务存在调用关系，又部署在一个 IceBox 实例中，则定义两者使用同一个 Communicator对象，实现服务本地调用的优化
IceBox.UseSharedCommunicator.Hello=1
IceBox.UseSharedCommunicator.Printer=1

# 最大消息包的字节数
IceBox.MessageSizeMax=2048
# 开启网络事件相关的日志追踪
IceBox.Trace.Network=1
# 开启线程池事件的日志追踪
IceBox.Trace.ThreadPool=1
# 开启 Locator 对象的日志追踪
IceBox.Trace.Locator=1


###### 下面参数用来配置IceBox的管理服务组件，管理服务组件默认是关闭的

# 开启并绑定到本地的9999端口
IceBox.ServiceManager.Endpoints = tcp -p 9999 -h localhost

###### 定义具体服务的相关参数

# name 定义 service 的名字，作为start方法的name参数，必须是唯一的
# entry_point 上面完整的 service 的完整类名，必须在 classpath 中可以找到
# [--key=value] 将会被作为 property 属性，用于构造该服务的 communicator，用来更加精确的控制每个Ice服务的性能调优，也可以使用--Ice.Config=xxx.cfg 的方式从具体服务的配置文件中加载参数。也可以用Ice.InheritProperties=1的属性，让所有的Ice服务实例都使用IceBox的配置属性
# [args] 作为参数传入 start 方法 String[] args，作为服务的启动初始化餐胡
IceBox.Service.name=entry_point[--key=value] [args]